{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Appstart","tagline":"Appstarter als Webapp","google":"","body":"#App Start \r\nApp Start ist eine kleine offline WebApp die mit Hilfe von Websockets und einer Server Komponente Apps auf einem Mac starten und grundlegend steuern kann.\r\n##Installation\r\nDas Programm ist aufgeteilt in zwei wesentliche Komponenten\r\n###WebApp\r\nDie Webapp ist zu finden unter `./public`. Dieser Ordner muss via Web ereichbar sein.\r\n###Server\r\nDer Server befindet sich in `./server` und darf **nicht** öffentlich erreichbar sein!\r\nDie Installation des servers ist relativ simpel. Zunächst installiert man sich [Composer](http://getcomposer.org) und navigiert im Terminal nach `./server`. Dort lassen sich die Abhängigkeiten mittels \r\n\r\n\tcomposer install\r\n\t\r\ninstallieren.   \r\nUm den Server zu starten gibt es das Bash-Script `./server/app-start`.\r\n\r\n##Konfiguration\r\n###Apps\r\nDie erreichbaren Anwendungen werden als JSON in `./server/apps.json` konfiguriert.  \r\nDas Schema ist wie folgt:\r\n\r\n\t[\r\n\t\t{\r\n\t\t\t\"name\" : \"XBMC\",\r\n\t\t\t\"file\" : \"\\/Applications\\/XBMC.app\",\r\n\t\t\t\"cmd\" : \"open\"\r\n\t\t},\r\n\t\t...\r\n\t}\r\n\t\r\nGrundlegend ist es ein Array von Objekten mit folgenden Eigenschaften:\r\n\r\n* `name` Angezeigter Name\r\n* `file` Pfad zur Anwendung.\r\n* `cmd` Terminal Command zum starten, in der Regel `open`\r\n\r\nDas Icon wird aus dem App-Bundle generiert.\r\n\r\n###Tmp Ordner\r\nDa die Anwendungsicons nicht jedes mal von neuem generiert werden sollen, werde diese in `./server/tmp` gecached. Dazu muss dieser Ordner existieren und von PHP beschreibbar sein.\r\n\r\n##Usage\r\nBashscript starten, WebApp auf dem iPad aufrufen. Steuern.\r\n\r\n##Requirements\r\n* PHP >= 5.3\r\n* [Composer](http://getcomposer.org)\r\n* [sips](http://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man1/sips.1.html) (Standardinstallation seit Mac OS 10.4)\r\n\r\n##Dependencies/Libraries\r\n\r\n###Mediakeys.py\r\nZur Steuerung von Play/Pause, Next Track, Prev Track etc. wird [mediakeys.py](https://gist.github.com/4078034) von [fredrikw](https://github.com/fredrikw) verwendet.\r\n###CFPropertyList\r\n[CFPropertyList](https://github.com/rodneyrehm/CFPropertyList) ist eine Library um die Info.plist Dateien der Anwendungen zu parsen von [Rodney Rehm](https://github.com/rodneyrehm)\r\n###Ratchet\r\n[Ratchet](http://socketo.me) ist eine Library die mir die Arbeit abnimmt einen Server zu implementieren, der sich um die Websocket-Verbindungen kümmert.\r\n###Bootstrap\r\n[Bootstrap](http://twitter.github.com/bootstrap/) von Twitter erleichtert mir die UI der Webapp.\r\n\r\n###WebApp Icon\r\nDas Icon der Webapp kommt von [CE0311](http://ce0311.deviantart.com/art/Aluminium-MacBook-Pro-OSX-106036633)\r\n\r\n##Screenshots\r\n![iPad](https://github.com/kanedo/AppStart/blob/master/screenshots/screenshot-ipad.PNG \"iPad\")  \r\niPad Webapp. Dafür wurde die Software entwickelt.  \r\n![iPhone](https://github.com/kanedo/AppStart/blob/master/screenshots/screenshot-iphone.PNG \"iPhone\")  \r\nAbfallprodukt ist, dass die Software auch auf dem iPhone funktioniert. \r\n\r\n##Fehler/Bugs/Verbesserungen\r\nWer etwas anzumerken hat, der schreibe doch bitte ein [github issue](https://github.com/kanedo/AppStart/issues) und wer es schnell gefixed wissen möchte und programmieren kann, der sendet mir bitte einen Pull-Request ;-) Das wäre ganz herzig!\r\n\r\n##Known issues\r\nDie Mediatasten funktionieren leider nur bei iTunes zuverlässig. Bei Spotify und anderen Musikanwendungen funktioniert aber in der Regel Play/Pause. Es ist oft hilfreich, dass Programm vorher noch einmal nach vorn zu holen, damit es sich die Mediakeys \"schnappt\". Das schafft man durch erneutes \"starten\" der App."}